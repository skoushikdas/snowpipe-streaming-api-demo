import unittest
from unittest.mock import patch, MagicMock
from ingestion.session.spark.session_singleton import SparkSessionSingleton
from ingestion.utils.logging.log_util import Logger
from ingestion.load.snowflake.write_stream.write_stream import MessagesWriteStream
from pyspark.sql import SparkSession
import sys

class TestMainScript(unittest.TestCase):

    @patch('ingestion.utils.logging.log_util.Logger.get_logger')
    @patch('ingestion.load.snowflake.write_stream.write_stream.MessagesWriteStream.consume_messages')
    @patch('ingestion.session.spark.session_singleton.SparkSessionSingleton.get_spark_session')
    def test_main_function(self, mock_get_spark_session, mock_consume_messages, mock_get_logger):
        # Mock instances
        mock_logger = mock_get_logger.return_value
        mock_spark_session = mock_get_spark_session.return_value
        mock_spark_context = mock_spark_session.sparkContext

        # Run the main function
        from main_script import main  # Import the main function
        main(mock_spark_session, mock_logger)

        # Assertions to verify code coverage
        mock_spark_context.setLogLevel.assert_called_once_with("INFO")
        mock_consume_messages.assert_called_once_with(mock_spark_context)
        mock_logger.info.assert_any_call("In main jobs")

    @patch('ingestion.utils.logging.log_util.Logger.get_logger')
    @patch('ingestion.session.spark.session_singleton.SparkSessionSingleton.get_spark_session')
    def test_script_entry_point(self, mock_get_spark_session, mock_get_logger):
        # Mock instances
        mock_logger = mock_get_logger.return_value
        mock_spark_session = mock_get_spark_session.return_value

        # Simulate running the script as __main__
        with patch('sys.argv', ['main_script.py']):
            with patch('__main__.__name__', '__main__'):
                import main_script  # Ensure your script is named 'main_script.py'
                main_script.main(mock_spark_session, mock_logger)

        # Assertions
        mock_logger.info.assert_any_call(f"Pyspark version pipeline using: {mock_spark_session.version}")
        mock_logger.info.assert_any_call(f"Python version pipeline using: {sys.version}")
        mock_logger.info.assert_any_call("Pipeline started")

if __name__ == '__main__':
    unittest.main()
